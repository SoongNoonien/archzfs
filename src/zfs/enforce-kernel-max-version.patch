From 0fd5f3539e2e8c218df216226b02bd8e9d5f8892 Mon Sep 17 00:00:00 2001
From: Rob Norris <robn@despairlabs.com>
Date: Tue, 12 Mar 2024 20:38:12 +1100
Subject: [PATCH 1/2] config/kernel: introduce "maximum experimental" kernel
 version

META lists the maximum kernel version we consider to be fully supported.
However, we don't enforce this.

Sometimes we ship experimental patches for a newer kernel than we're
ready to support or, less often, we compile just fine against a newer
kernel. Invariably, something doesn't quite work properly, and it's
difficult for users to understan that they're actually running against a
kernel that we're not yet ready to support.

This commit tries to improve this situation. First, it simply enforces
Linux-Maximum, by having configure bail out if you try to compile
against a newer version that.

Then, it adds Linux-Maximum-Experimental to META, as the highest version
we think _might_ work, but we definitely aren't ready to support.
Supplying --enable-linux-experimental will allow OpenZFS to be built up
to that kernel version. This also causes a big warning message to be
displayed when configure finishes.

By design, there is no way to compile against a kernel version beyond
the maximum-experimental version.

When doing an experimental build, HAVE_LINUX_EXPERIMENTAL is defined,
which allows us to add code to modify runtime behaviour as well.

Signed-off-by: Rob Norris <robn@despairlabs.com>
Sponsored-by: https://despairlabs.com/sponsor/
---
 META                         |   3 +-
 config/ax_compare_version.m4 | 177 +++++++++++++++++++++++++++++++++++
 config/kernel.m4             |  72 +++++++++++++-
 config/zfs-meta.m4           |   9 ++
 configure.ac                 |   2 +
 5 files changed, 260 insertions(+), 3 deletions(-)
 create mode 100644 config/ax_compare_version.m4

diff --git a/META b/META
index 19a796050f5b..3780508fdc55 100644
--- a/META
+++ b/META
@@ -6,5 +6,6 @@ Release:       1
 Release-Tags:  relext
 License:       CDDL
 Author:        OpenZFS
-Linux-Maximum: 6.8
 Linux-Minimum: 3.10
+Linux-Maximum: 6.8
+Linux-Maximum-Experimental: 6.9
diff --git a/config/ax_compare_version.m4 b/config/ax_compare_version.m4
new file mode 100644
index 000000000000..ffb4997e8b14
--- /dev/null
+++ b/config/ax_compare_version.m4
@@ -0,0 +1,177 @@
+# ===========================================================================
+#    https://www.gnu.org/software/autoconf-archive/ax_compare_version.html
+# ===========================================================================
+#
+# SYNOPSIS
+#
+#   AX_COMPARE_VERSION(VERSION_A, OP, VERSION_B, [ACTION-IF-TRUE], [ACTION-IF-FALSE])
+#
+# DESCRIPTION
+#
+#   This macro compares two version strings. Due to the various number of
+#   minor-version numbers that can exist, and the fact that string
+#   comparisons are not compatible with numeric comparisons, this is not
+#   necessarily trivial to do in a autoconf script. This macro makes doing
+#   these comparisons easy.
+#
+#   The six basic comparisons are available, as well as checking equality
+#   limited to a certain number of minor-version levels.
+#
+#   The operator OP determines what type of comparison to do, and can be one
+#   of:
+#
+#    eq  - equal (test A == B)
+#    ne  - not equal (test A != B)
+#    le  - less than or equal (test A <= B)
+#    ge  - greater than or equal (test A >= B)
+#    lt  - less than (test A < B)
+#    gt  - greater than (test A > B)
+#
+#   Additionally, the eq and ne operator can have a number after it to limit
+#   the test to that number of minor versions.
+#
+#    eq0 - equal up to the length of the shorter version
+#    ne0 - not equal up to the length of the shorter version
+#    eqN - equal up to N sub-version levels
+#    neN - not equal up to N sub-version levels
+#
+#   When the condition is true, shell commands ACTION-IF-TRUE are run,
+#   otherwise shell commands ACTION-IF-FALSE are run. The environment
+#   variable 'ax_compare_version' is always set to either 'true' or 'false'
+#   as well.
+#
+#   Examples:
+#
+#     AX_COMPARE_VERSION([3.15.7],[lt],[3.15.8])
+#     AX_COMPARE_VERSION([3.15],[lt],[3.15.8])
+#
+#   would both be true.
+#
+#     AX_COMPARE_VERSION([3.15.7],[eq],[3.15.8])
+#     AX_COMPARE_VERSION([3.15],[gt],[3.15.8])
+#
+#   would both be false.
+#
+#     AX_COMPARE_VERSION([3.15.7],[eq2],[3.15.8])
+#
+#   would be true because it is only comparing two minor versions.
+#
+#     AX_COMPARE_VERSION([3.15.7],[eq0],[3.15])
+#
+#   would be true because it is only comparing the lesser number of minor
+#   versions of the two values.
+#
+#   Note: The characters that separate the version numbers do not matter. An
+#   empty string is the same as version 0. OP is evaluated by autoconf, not
+#   configure, so must be a string, not a variable.
+#
+#   The author would like to acknowledge Guido Draheim whose advice about
+#   the m4_case and m4_ifvaln functions make this macro only include the
+#   portions necessary to perform the specific comparison specified by the
+#   OP argument in the final configure script.
+#
+# LICENSE
+#
+#   Copyright (c) 2008 Tim Toolan <toolan@ele.uri.edu>
+#
+#   Copying and distribution of this file, with or without modification, are
+#   permitted in any medium without royalty provided the copyright notice
+#   and this notice are preserved. This file is offered as-is, without any
+#   warranty.
+
+#serial 13
+
+dnl #########################################################################
+AC_DEFUN([AX_COMPARE_VERSION], [
+  AC_REQUIRE([AC_PROG_AWK])
+
+  # Used to indicate true or false condition
+  ax_compare_version=false
+
+  # Convert the two version strings to be compared into a format that
+  # allows a simple string comparison.  The end result is that a version
+  # string of the form 1.12.5-r617 will be converted to the form
+  # 0001001200050617.  In other words, each number is zero padded to four
+  # digits, and non digits are removed.
+  AS_VAR_PUSHDEF([A],[ax_compare_version_A])
+  A=`echo "$1" | sed -e 's/\([[0-9]]*\)/Z\1Z/g' \
+                     -e 's/Z\([[0-9]]\)Z/Z0\1Z/g' \
+                     -e 's/Z\([[0-9]][[0-9]]\)Z/Z0\1Z/g' \
+                     -e 's/Z\([[0-9]][[0-9]][[0-9]]\)Z/Z0\1Z/g' \
+                     -e 's/[[^0-9]]//g'`
+
+  AS_VAR_PUSHDEF([B],[ax_compare_version_B])
+  B=`echo "$3" | sed -e 's/\([[0-9]]*\)/Z\1Z/g' \
+                     -e 's/Z\([[0-9]]\)Z/Z0\1Z/g' \
+                     -e 's/Z\([[0-9]][[0-9]]\)Z/Z0\1Z/g' \
+                     -e 's/Z\([[0-9]][[0-9]][[0-9]]\)Z/Z0\1Z/g' \
+                     -e 's/[[^0-9]]//g'`
+
+  dnl # In the case of le, ge, lt, and gt, the strings are sorted as necessary
+  dnl # then the first line is used to determine if the condition is true.
+  dnl # The sed right after the echo is to remove any indented white space.
+  m4_case(m4_tolower($2),
+  [lt],[
+    ax_compare_version=`echo "x$A
+x$B" | sed 's/^ *//' | sort -r | sed "s/x${A}/false/;s/x${B}/true/;1q"`
+  ],
+  [gt],[
+    ax_compare_version=`echo "x$A
+x$B" | sed 's/^ *//' | sort | sed "s/x${A}/false/;s/x${B}/true/;1q"`
+  ],
+  [le],[
+    ax_compare_version=`echo "x$A
+x$B" | sed 's/^ *//' | sort | sed "s/x${A}/true/;s/x${B}/false/;1q"`
+  ],
+  [ge],[
+    ax_compare_version=`echo "x$A
+x$B" | sed 's/^ *//' | sort -r | sed "s/x${A}/true/;s/x${B}/false/;1q"`
+  ],[
+    dnl Split the operator from the subversion count if present.
+    m4_bmatch(m4_substr($2,2),
+    [0],[
+      # A count of zero means use the length of the shorter version.
+      # Determine the number of characters in A and B.
+      ax_compare_version_len_A=`echo "$A" | $AWK '{print(length)}'`
+      ax_compare_version_len_B=`echo "$B" | $AWK '{print(length)}'`
+
+      # Set A to no more than B's length and B to no more than A's length.
+      A=`echo "$A" | sed "s/\(.\{$ax_compare_version_len_B\}\).*/\1/"`
+      B=`echo "$B" | sed "s/\(.\{$ax_compare_version_len_A\}\).*/\1/"`
+    ],
+    [[0-9]+],[
+      # A count greater than zero means use only that many subversions
+      A=`echo "$A" | sed "s/\(\([[0-9]]\{4\}\)\{m4_substr($2,2)\}\).*/\1/"`
+      B=`echo "$B" | sed "s/\(\([[0-9]]\{4\}\)\{m4_substr($2,2)\}\).*/\1/"`
+    ],
+    [.+],[
+      AC_WARNING(
+        [invalid OP numeric parameter: $2])
+    ],[])
+
+    # Pad zeros at end of numbers to make same length.
+    ax_compare_version_tmp_A="$A`echo $B | sed 's/./0/g'`"
+    B="$B`echo $A | sed 's/./0/g'`"
+    A="$ax_compare_version_tmp_A"
+
+    # Check for equality or inequality as necessary.
+    m4_case(m4_tolower(m4_substr($2,0,2)),
+    [eq],[
+      test "x$A" = "x$B" && ax_compare_version=true
+    ],
+    [ne],[
+      test "x$A" != "x$B" && ax_compare_version=true
+    ],[
+      AC_WARNING([invalid OP parameter: $2])
+    ])
+  ])
+
+  AS_VAR_POPDEF([A])dnl
+  AS_VAR_POPDEF([B])dnl
+
+  dnl # Execute ACTION-IF-TRUE / ACTION-IF-FALSE.
+  if test "$ax_compare_version" = "true" ; then
+    m4_ifvaln([$4],[$4],[:])dnl
+    m4_ifvaln([$5],[else $5])dnl
+  fi
+]) dnl AX_COMPARE_VERSION
diff --git a/config/kernel.m4 b/config/kernel.m4
index 548905ccd04d..4dd5ed93e486 100644
--- a/config/kernel.m4
+++ b/config/kernel.m4
@@ -501,13 +501,57 @@ AC_DEFUN([ZFS_AC_KERNEL], [
 
 	AC_MSG_RESULT([$kernsrcver])
 
-	AS_VERSION_COMPARE([$kernsrcver], [$ZFS_META_KVER_MIN], [
-		 AC_MSG_ERROR([
+	AX_COMPARE_VERSION([$kernsrcver], [ge], [$ZFS_META_KVER_MIN], [], [
+		AC_MSG_ERROR([
 	*** Cannot build against kernel version $kernsrcver.
 	*** The minimum supported kernel version is $ZFS_META_KVER_MIN.
 		])
 	])
 
+	AC_ARG_ENABLE([linux-experimental],
+		AS_HELP_STRING([--enable-linux-experimental],
+		[Allow building against some unsupported kernel versions]))
+
+	AX_COMPARE_VERSION([$kernsrcver], [ge], [$ZFS_META_KVER_MAX], [
+		AX_COMPARE_VERSION([$kernsrcver], [eq2], [$ZFS_META_KVER_MAX], [
+			kern_max_version_ok=yes
+		], [
+			kern_max_version_ok=no
+		])
+	], [
+		kern_max_version_ok=yes
+	])
+	AX_COMPARE_VERSION([$kernsrcver], [ge], [$ZFS_META_KVER_EXP_MAX], [
+		AX_COMPARE_VERSION([$kernsrcver], [eq2], [$ZFS_META_KVER_EXP_MAX], [
+			kern_max_exp_version_ok=yes
+		], [
+			kern_max_exp_version_ok=no
+		])
+	], [
+		kern_max_exp_version_ok=yes
+	])
+
+	AS_IF([test "x$enable_linux_experimental" == "xyes" && \
+	    test "x$kern_max_version_ok" != "xyes"], [
+		AS_IF([test "x$kern_max_exp_version_ok" == "xyes"], [
+			AC_DEFINE(HAVE_LINUX_EXPERIMENTAL, 1,
+			    [building against unsupported kernel version])
+		], [
+			AC_MSG_ERROR([
+	*** Cannot build against kernel version $kernsrcver.
+	*** The maximum supported kernel version is $ZFS_META_KVER_MAX.
+	*** The maximum supported experimental kernel version is $ZFS_META_KVER_EXP_MAX.
+			])
+		])
+	], [
+		AS_IF([test "x$kern_max_version_ok" != "xyes"], [
+			AC_MSG_ERROR([
+	*** Cannot build against kernel version $kernsrcver.
+	*** The maximum supported kernel version is $ZFS_META_KVER_MAX.
+			])
+		])
+	])
+
 	LINUX=${kernelsrc}
 	LINUX_OBJ=${kernelbuild}
 	LINUX_VERSION=${kernsrcver}
@@ -517,6 +561,30 @@ AC_DEFUN([ZFS_AC_KERNEL], [
 	AC_SUBST(LINUX_VERSION)
 ])
 
+AC_DEFUN([ZFS_AC_KERNEL_VERSION_WARNING], [
+	AS_IF([test "x$enable_linux_experimental" = "xyes" && \
+	    test "x$kern_max_version_ok" != "xyes"], [
+		AC_MSG_WARN([
+
+	You are building OpenZFS against Linux version $kernsrcver.
+
+	This combination is considered EXPERIMENTAL by the OpenZFS project.
+	Even if it appears to build and run correctly, there may be bugs that
+	can cause SERIOUS DATA LOSS.
+
+	YOU HAVE BEEN WARNED!
+
+	If you choose to continue, we'd appreciate if you could report your
+	results on the OpenZFS issue tracker at:
+
+	    https://github.com/openzfs/zfs/issues/new
+
+	Your feedback will help us prepare a new OpenZFS release that supports
+	this version of Linux.
+		])
+	])
+])
+
 dnl #
 dnl # Detect the QAT module to be built against, QAT provides hardware
 dnl # acceleration for data compression:
diff --git a/config/zfs-meta.m4 b/config/zfs-meta.m4
index 20064a0fb595..a149e8f93fb7 100644
--- a/config/zfs-meta.m4
+++ b/config/zfs-meta.m4
@@ -156,6 +156,15 @@ AC_DEFUN([ZFS_AC_META], [
 			AC_SUBST([ZFS_META_KVER_MAX])
 		fi
 
+		ZFS_META_KVER_EXP_MAX=_ZFS_AC_META_GETVAL([Linux-Maximum-Experimental]);
+		if test -n "$ZFS_META_KVER_EXP_MAX"; then
+			AC_DEFINE_UNQUOTED([ZFS_META_KVER_EXP_MAX],
+			    ["$ZFS_META_KVER_EXP_MAX"],
+			    [Define the maximum compatible kernel version.]
+			)
+			AC_SUBST([ZFS_META_KVER_EXP_MAX])
+		fi
+
 		m4_pattern_allow([^LT_(CURRENT|REVISION|AGE)$])
 		ZFS_META_LT_CURRENT=_ZFS_AC_META_GETVAL([LT_Current]);
 		ZFS_META_LT_REVISION=_ZFS_AC_META_GETVAL([LT_Revision]);
diff --git a/configure.ac b/configure.ac
index 2ce049c58219..9e043862ed1f 100644
--- a/configure.ac
+++ b/configure.ac
@@ -87,3 +87,5 @@ AC_CONFIG_FILES([
 
 
 AC_OUTPUT
+
+ZFS_AC_KERNEL_VERSION_WARNING

From 08b6eff0b3735e6165aecc5e58ca884a1e847dbe Mon Sep 17 00:00:00 2001
From: Rob Norris <robn@despairlabs.com>
Date: Sun, 5 May 2024 14:04:57 +1000
Subject: [PATCH 2/2] linux: log a scary warning when used with an experimental
 kernel

Since the person using the kernel may not be the person who built it,
show a warning at module load too, in case they aren't aware that it
might be weird.

Signed-off-by: Rob Norris <robn@despairlabs.com>
Sponsored-by: https://despairlabs.com/sponsor/
---
 module/os/linux/zfs/zfs_ioctl_os.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/module/os/linux/zfs/zfs_ioctl_os.c b/module/os/linux/zfs/zfs_ioctl_os.c
index 663474ea49ab..502d173b70f9 100644
--- a/module/os/linux/zfs/zfs_ioctl_os.c
+++ b/module/os/linux/zfs/zfs_ioctl_os.c
@@ -303,6 +303,12 @@ openzfs_init_os(void)
 	    "ZFS pool version %s, ZFS filesystem version %s\n",
 	    ZFS_META_VERSION, ZFS_META_RELEASE, ZFS_DEBUG_STR,
 	    SPA_VERSION_STRING, ZPL_VERSION_STRING);
+#ifdef HAVE_LINUX_EXPERIMENTAL
+	printk(KERN_NOTICE "ZFS: Using ZFS with kernel %s is EXPERIMENTAL and "
+	    "SERIOUS DATA LOSS may occur!\n", utsname()->release);
+	printk(KERN_NOTICE "ZFS: Please report your results at: "
+	    "https://github.com/openzfs/zfs/issues/new\n");
+#endif
 #ifndef CONFIG_FS_POSIX_ACL
 	printk(KERN_NOTICE "ZFS: Posix ACLs disabled by kernel\n");
 #endif /* CONFIG_FS_POSIX_ACL */
